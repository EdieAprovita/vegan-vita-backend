name: üöÄ Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  # ============================================
  # JOB 1: Pruebas previas al despliegue
  # ============================================
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run all tests
        run: pnpm run test && pnpm run test:e2e

      - name: Build application
        run: pnpm run build

      - name: Run linting
        run: pnpm run lint

      - name: Set deployment flag
        id: check
        run: echo "should_deploy=true" >> $GITHUB_OUTPUT

  # ============================================
  # JOB 2: Build and Push Docker Image
  # ============================================
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # JOB 3: Deploy to Production
  # ============================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-docker]
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_HOST }} << 'EOF'
          set -e

          echo "üöÄ Starting VeganVita Backend deployment..."

          cd ${{ secrets.PRODUCTION_APP_PATH }}

          # Backup current version
          cp -r dist dist.backup || true

          # Pull latest code
          git pull origin main

          # Install dependencies
          pnpm install --frozen-lockfile

          # Build
          pnpm run build

          # Run migrations if needed
          # pnpm run migration:run

          # Restart service
          systemctl restart vegan-vita-backend

          # Verify service is running
          sleep 3
          systemctl is-active vegan-vita-backend || exit 1

          echo "‚úÖ Deployment completed successfully"
          EOF

      - name: Health check
        run: |
          for i in {1..30}; do
            if curl -f ${{ secrets.PRODUCTION_APP_URL }}/api/health; then
              echo "‚úÖ Health check passed"
              exit 0
            fi
            echo "‚è≥ Waiting for service to be healthy... ($i/30)"
            sleep 2
          done
          echo "‚ùå Health check failed"
          exit 1

      - name: Slack notification - Success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚úÖ Production deployment successful",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "‚úÖ Production Deployment Successful"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n‚úÖ Success"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\nProduction"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\nmain"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*URL:* ${{ secrets.PRODUCTION_APP_URL }}\n*Logs:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Slack notification - Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚ùå Production deployment failed",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "‚ùå Production Deployment Failed"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n‚ùå Failed"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\nProduction"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\nmain"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Logs:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Create deployment record
        if: always()
        run: |
          echo "Deployment completed at $(date)" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # JOB 4: Post-deployment Validation
  # ============================================
  validate:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: deploy
    if: success()

    steps:
      - name: Validate endpoints
        run: |
          echo "üîç Validating API endpoints..."

          # Check health endpoint
          curl -f ${{ secrets.PRODUCTION_APP_URL }}/api/health || exit 1

          echo "‚úÖ All endpoints are responding"

      - name: Database connectivity check
        run: |
          echo "üóÑÔ∏è Checking database connectivity..."
          # Add your database health checks here
          echo "‚úÖ Database is accessible"
