name: CI - Pruebas y Calidad de Código

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  # ============================================
  # JOB 1: Setup y Cache
  # ============================================
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM Store Directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup PNPM Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

  # ============================================
  # JOB 2: Linting y Formato
  # ============================================
  lint:
    name: Linting & Code Style
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore PNPM Cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint
        continue-on-error: false

      - name: Check Prettier Formatting
        run: pnpm run format -- --check
        continue-on-error: true

  # ============================================
  # JOB 3: Build del Proyecto
  # ============================================
  build:
    name: Build TypeScript
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore PNPM Cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Application
        run: pnpm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ github.run_id }}
          path: dist/
          retention-days: 1

  # ============================================
  # JOB 4: Tests Unitarios
  # ============================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore PNPM Cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Unit Tests
        run: pnpm run test

      - name: Run Tests with Coverage
        run: pnpm run test:cov

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # ============================================
  # JOB 5: Tests E2E
  # ============================================
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vegan_vita_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore PNPM Cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run E2E Tests
        run: pnpm run test:e2e
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: vegan_vita_test
          JWT_SECRET: test-secret-key
          NODE_ENV: test

  # ============================================
  # JOB 6: Análisis de Dependencias
  # ============================================
  security:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore PNPM Cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run PNPM Audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: true

  # ============================================
  # JOB 7: Resumen y Status
  # ============================================
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, build, test-unit, test-e2e, security]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [ "${{ needs.lint.result }}" == "failure" ] || \
             [ "${{ needs.build.result }}" == "failure" ] || \
             [ "${{ needs.test-unit.result }}" == "failure" ] || \
             [ "${{ needs.test-e2e.result }}" == "failure" ]; then
            echo "❌ CI Pipeline failed"
            exit 1
          else
            echo "✅ CI Pipeline passed"
          fi

      - name: CI Summary
        run: |
          echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test-unit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.test-e2e.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
